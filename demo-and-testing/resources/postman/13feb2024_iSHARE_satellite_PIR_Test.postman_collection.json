{
	"info": {
		"_postman_id": "1a3b1ed8-125e-42e2-b812-7be09d148ba7",
		"name": "https://isharesat-mw.pir.test.ishareworks.nl",
		"description": "[https://isharesat-mw.pir.test.ishareworks.nl/](https://isharesat.pir.test.ishareworks.nl/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17458003",
		"_collection_link": "https://orange-eclipse-120026.postman.co/workspace/53320380-6eee-4366-bcc9-762d2ea750a7/collection/17458003-1a3b1ed8-125e-42e2-b812-7be09d148ba7?action=share&source=collection_link&creator=17458003"
	},
	"item": [
		{
			"name": "Entitled Party Creation (self)",
			"item": [
				{
					"name": "Satellite requests access token from itself",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"iss = 'sat.client_id'\r",
									"aud = 'sat.client_id'\r",
									"x5c = 'sat.public_key'\r",
									"privateKey = 'sat.private_key'\r",
									"\r",
									"eval(globals.generateJwsToken)(iss, aud, x5c, privateKey);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var soTokenResponse = JSON.parse(responseBody);",
									"pm.globals.set(\"so.accesstoken.testcollection\", soTokenResponse.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "iSHARE",
									"type": "text"
								},
								{
									"key": "client_assertion_type",
									"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
									"type": "text"
								},
								{
									"key": "client_assertion",
									"value": "{{client_assertion}}",
									"description": "Copies Satellite's own client_assertion from pre-request script",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{sat.client_id}}",
									"description": "Id of party doing the request (Self- EU.EORI.NLTESTPIRSAT1)",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{sat.baseurl}}/connect/token",
							"host": [
								"{{sat.baseurl}}"
							],
							"path": [
								"connect",
								"token"
							]
						},
						"description": "Requests an access token from the Scheme Owner, to be used for accessing Scheme Owner services.\nContains a pre-request script that creates a client_assertion via the iSHARE Testing function /generate-jws, to be used for testing purposes only.\nAfter successfully receiving the access token, it's value is stored as a global variable to be used for all other Scheme Owner services."
					},
					"response": []
				},
				{
					"name": "Create Entitled Party wo certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//to decode the response (output in console) when received as JWT. ",
									"//If the response is not JWT this results in error, which can be ignored)",
									"",
									"function jwt_decode(a) {",
									"    var parts = a.split('.'); // header, payload, signature",
									"    return JSON.parse(atob(parts[1]));",
									"}",
									"//Get the token",
									"var a=responseBody;",
									"",
									"//call your function to decode it",
									"let decodedData=jwt_decode(a);",
									"",
									"//print the decodedData to console to see the structure",
									"console.log(decodedData);",
									"    ",
									"responseBody = decodedData;",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{so.accesstoken.testcollection}}"
							},
							{
								"key": "Do-Not-Sign",
								"name": "Content-Type",
								"type": "text",
								"value": "true",
								"description": "Only used for testing and in test/dev environments"
							},
							{
								"key": "Content-Type",
								"value": "true",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"party_id\": \"EU.EORI.TESTENTPARTY280\",\n    \"party_name\": \"EntitledParty 280\",\n    \"capability_url\": \"\",\n    \"registrar_id\": \"EU.EORI.NLTESTPIRSAT1\",\n    \"adherence\": {\n        \"status\": \"Active\",\n        \"start_date\": \"2022-02-04T00:00:00.000Z\",\n        \"end_date\": \"2023-02-05T00:00:00.000Z\"\n    },\n    \"authregistries\": [\n        {\n            \"authregistery_id\": \"EU.EORI.NL000000004\",\n            \"authregistery_name\": \"iSHARE Test Authorization Registry\",\n            \"authregistery_url\": \"https://ar.isharetest.net\",\n            \"dataspace_id\": \"DSP.EU.NL.LOGISTICS\",\n            \"dataspace_title\": \"Logistics NL\"\n        }\n    ],\n    \"additional_info\": {\n        \"description\": \"Test party creation 1\",\n        \"logo\": \"\",\n        \"website\": \"https://www.example.com\",\n        \"company_phone\": \"\",\n        \"company_email\": \"\",\n        \"publicly_publishable\": \"false\"\n    },\n    \"agreements\": [\n        {\n            \"type\": \"TermsOfUse\",\n            \"title\": \"ToU-iSHARE\",\n            \"status\": \"Accepted\",\n            \"sign_date\": \"2022-02-04T00:00:00.000Z\",\n            \"expiry_date\": \"2023-02-02T23:00:00.000Z\",\n            \"agreement_file\": \"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\",\n            \"framework\": \"iSHARE\",\n            \"dataspace_id\": \"DSP.EU.NL.LOGISTICS\",\n            \"dataspace_title\": \"Logistics NL\",\n            \"complaiancy_verified\": \"no\"\n        },\n        {\n            \"type\": \"AccessionAgreement\",\n            \"title\": \"iSHARE-AA\",\n            \"status\": \"Accepted\",\n            \"sign_date\": \"2022-02-04T00:00:00.000Z\",\n            \"expiry_date\": \"2023-02-02T23:00:00.000Z\",\n            \"agreement_file\": \"\",\n            \"framework\": \"iSHARE\",\n            \"dataspace_id\": \"DSP.EU.NL.LOGISTICS\",\n            \"dataspace_title\": \"Logistics NL\",\n            \"complaiancy_verified\": \"no\"\n        }\n    ],\n    \"spor\": {\n        \"signed_request\": \"\"\n    },\n    \"roles\": [\n        {\n            \"role\": \"EntitledParty\",\n            \"start_date\": \"2022-02-04T00:00:00.000Z\",\n            \"end_date\": \"2023-02-04T00:00:00.000Z\",\n            \"loa\": \"Substantial\",\n            \"complaiancy_verified\": \"no\",\n            \"legal_adherence\": \"no\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sat.baseurl}}/ep_creation",
							"host": [
								"{{sat.baseurl}}"
							],
							"path": [
								"ep_creation"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ABC Trucking and Satellite",
			"item": [
				{
					"name": "ABC Trucking requests access token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"iss = 'abc.client_id'\r",
									"aud = 'sat.client_id'\r",
									"x5c = 'abc.public_key'\r",
									"privateKey = 'abc.private_key'\r",
									"\r",
									"eval(globals.generateJwsToken)(iss, aud, x5c, privateKey);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var soTokenResponse = JSON.parse(responseBody);",
									"pm.globals.set(\"so.accesstoken.testcollection\", soTokenResponse.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "iSHARE",
									"type": "text"
								},
								{
									"key": "client_assertion_type",
									"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
									"type": "text"
								},
								{
									"key": "client_assertion",
									"value": "{{client_assertion}}",
									"description": "Copies ABC Trucking client_assertion from pre-request script",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{abc.client_id}}",
									"description": "Id of party doing the request (ABC Trucking - EU.EORI.NL000000001)",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{sat.baseurl}}/connect/token",
							"host": [
								"{{sat.baseurl}}"
							],
							"path": [
								"connect",
								"token"
							]
						},
						"description": "Requests an access token from the Scheme Owner, to be used for accessing Scheme Owner services.\nContains a pre-request script that creates a client_assertion via the iSHARE Testing function /generate-jws, to be used for testing purposes only.\nAfter successfully receiving the access token, it's value is stored as a global variable to be used for all other Scheme Owner services."
					},
					"response": []
				},
				{
					"name": "Requests trusted list (CAs)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{so.accesstoken.testcollection}}"
							},
							{
								"key": "Do-Not-Sign",
								"value": "true",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{sat.baseurl}}/trusted_list",
							"host": [
								"{{sat.baseurl}}"
							],
							"path": [
								"trusted_list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request capabilities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//to decode the response (output in console) when received as JWT. ",
									"//If the response is not JWT this results in error, which can be ignored)",
									"",
									"function jwt_decode(a) {",
									"    var parts = a.split('.'); // header, payload, signature",
									"    return JSON.parse(atob(parts[1]));",
									"}",
									"//Get the token",
									"var a=responseBody;",
									"",
									"//call your function to decode it",
									"let decodedData=jwt_decode(a);",
									"",
									"//print the decodedData to console to see the structure",
									"console.log(decodedData);",
									"    ",
									" responseBody = decodedData;",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{so.accesstoken.testcollection}}",
								"disabled": true
							},
							{
								"key": "Do-Not-Sign",
								"name": "Content-Type",
								"type": "text",
								"value": "true",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "true"
							}
						],
						"url": {
							"raw": "{{sat.baseurl}}/capabilities",
							"host": [
								"{{sat.baseurl}}"
							],
							"path": [
								"capabilities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request versions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//to decode the response (output in console) when received as JWT. ",
									"//If the response is not JWT this results in error, which can be ignored)",
									"",
									"function jwt_decode(a) {",
									"    var parts = a.split('.'); // header, payload, signature",
									"    return JSON.parse(atob(parts[1]));",
									"}",
									"//Get the token",
									"var a=responseBody;",
									"",
									"//call your function to decode it",
									"let decodedData=jwt_decode(a);",
									"",
									"//print the decodedData to console to see the structure",
									"console.log(decodedData);",
									"    ",
									" responseBody = decodedData;",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{so.accesstoken.testcollection}}"
							},
							{
								"key": "Do-Not-Sign",
								"name": "Content-Type",
								"type": "text",
								"value": "true"
							},
							{
								"key": "Content-Type",
								"value": "true"
							}
						],
						"url": {
							"raw": "{{sat.baseurl}}/versions",
							"host": [
								"{{sat.baseurl}}"
							],
							"path": [
								"versions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search party",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//to decode the response (output in console) when received as JWT. ",
									"//If the response is not JWT this results in error, which can be ignored)",
									"",
									"function jwt_decode(a) {",
									"    var parts = a.split('.'); // header, payload, signature",
									"    return JSON.parse(atob(parts[1]));",
									"}",
									"//Get the token",
									"var a=responseBody;",
									"",
									"//call your function to decode it",
									"let decodedData=jwt_decode(a);",
									"",
									"//print the decodedData to console to see the structure",
									"console.log(decodedData);",
									"    ",
									" responseBody = decodedData;",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{so.accesstoken.testcollection}}"
							},
							{
								"key": "Do-Not-Sign",
								"name": "Content-Type",
								"type": "text",
								"value": "true"
							},
							{
								"key": "Content-Type",
								"value": "true"
							}
						],
						"url": {
							"raw": "{{sat.baseurl}}/parties?name=ABC Tr*",
							"host": [
								"{{sat.baseurl}}"
							],
							"path": [
								"parties"
							],
							"query": [
								{
									"key": "eori",
									"value": "EU.EORI.NL000000003",
									"description": "EORI of the party whose status we want to check (in this case dummy-AR)",
									"disabled": true
								},
								{
									"key": "active_only",
									"value": "true",
									"disabled": true
								},
								{
									"key": "certified_only",
									"value": "true",
									"disabled": true
								},
								{
									"key": "certificate_subject_name",
									"value": "C=NL, SERIALNUMBER=NL000000004, CN=iSHARE Test Authorization Registry",
									"disabled": true
								},
								{
									"key": "subjectName",
									"value": "SERIALNUMBER=EU.EORI.BUDR0000002,CN=Driver 2",
									"disabled": true
								},
								{
									"key": "eori",
									"value": "",
									"disabled": true
								},
								{
									"key": "certified_only",
									"value": "",
									"disabled": true
								},
								{
									"key": "active_only",
									"value": "",
									"disabled": true
								},
								{
									"key": "date_time",
									"value": "2022-02-04",
									"disabled": true
								},
								{
									"key": "adherenceStatus",
									"value": "Active",
									"disabled": true
								},
								{
									"key": "adherenceStartdate",
									"value": "",
									"disabled": true
								},
								{
									"key": "adherenceEnddate",
									"value": "",
									"disabled": true
								},
								{
									"key": "registarSatelliteID",
									"value": "EU.EORI.NLISFSATONE",
									"disabled": true
								},
								{
									"key": "webSiteUrl",
									"value": "www*",
									"disabled": true
								},
								{
									"key": "companyEmail",
									"value": "*@*",
									"disabled": true
								},
								{
									"key": "companyPhone",
									"value": "123456789",
									"disabled": true
								},
								{
									"key": "publiclyPublishable",
									"value": "false",
									"disabled": true
								},
								{
									"key": "tags",
									"value": "*maritime",
									"disabled": true
								},
								{
									"key": "framework",
									"value": "iSHARE",
									"disabled": true
								},
								{
									"key": "subjectName",
									"value": "",
									"disabled": true
								},
								{
									"key": "role",
									"value": "isharesatellite",
									"disabled": true
								},
								{
									"key": "loA",
									"value": "High",
									"disabled": true
								},
								{
									"key": "compliancyVerified",
									"value": "yes",
									"disabled": true
								},
								{
									"key": "legalAdherence",
									"value": "yes",
									"disabled": true
								},
								{
									"key": "authorizationRegistryID",
									"value": "EU.EORI.NL000000004",
									"disabled": true
								},
								{
									"key": "authorizationRegistryName",
									"value": "iSHARE Test Authorization Registry",
									"disabled": true
								},
								{
									"key": "dataSpaceID",
									"value": "DSP.EU.NL.LOGISTICS",
									"disabled": true
								},
								{
									"key": "dataSpaceTitle",
									"value": "Logistics NL",
									"disabled": true
								},
								{
									"key": "countriesOfOperation",
									"value": "India",
									"disabled": true
								},
								{
									"key": "sectorIndustry",
									"value": "Energy",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "certificate_subject_name",
									"value": "CN=PyrolysisPlant,serialNumber=EU.EORI.DE1623002,O=Pyrolysis Plant,C=DE",
									"disabled": true
								},
								{
									"key": "certificate_subject_name",
									"value": "C=DE,CN=PyrolysisPlant,SERIALNUMBER=EU.EORI.DE1623002,O=Pyrolysis Plant",
									"disabled": true
								},
								{
									"key": "name",
									"value": "ABC Tr*"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Request party data(token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//to decode the response (output in console) when received as JWT. ",
									"//If the response is not JWT this results in error, which can be ignored)",
									"",
									"function jwt_decode(a) {",
									"    var parts = a.split('.'); // header, payload, signature",
									"    return JSON.parse(atob(parts[1]));",
									"}",
									"//Get the token",
									"var a=responseBody;",
									"",
									"//call your function to decode it",
									"let decodedData=jwt_decode(a);",
									"",
									"//print the decodedData to console to see the structure",
									"console.log(decodedData);",
									"    ",
									" responseBody = decodedData;",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{so.accesstoken.testcollection}}"
							},
							{
								"key": "Do-Not-Sign",
								"name": "Content-Type",
								"type": "text",
								"value": "true"
							},
							{
								"key": "Content-Type",
								"value": "true"
							}
						],
						"url": {
							"raw": "{{sat.baseurl}}/parties/EU.EORI.NL000000001",
							"host": [
								"{{sat.baseurl}}"
							],
							"path": [
								"parties",
								"EU.EORI.NL000000001"
							],
							"query": [
								{
									"key": "eori",
									"value": "EU.EORI.NL000000003",
									"disabled": true
								},
								{
									"key": "active_only",
									"value": "true",
									"disabled": true
								},
								{
									"key": "certified_only",
									"value": "true",
									"disabled": true
								},
								{
									"key": "certificate_subject_name",
									"value": "C=NL, SERIALNUMBER=NL000000004, CN=iSHARE Test Authorization Registry",
									"disabled": true
								},
								{
									"key": "subjectName",
									"value": "SERIALNUMBER=EU.EORI.BUDR0000002,CN=Driver 2",
									"disabled": true
								},
								{
									"key": "eori",
									"value": "",
									"disabled": true
								},
								{
									"key": "certified_only",
									"value": "",
									"disabled": true
								},
								{
									"key": "active_only",
									"value": "",
									"disabled": true
								},
								{
									"key": "date_time",
									"value": "2022-02-04",
									"disabled": true
								},
								{
									"key": "adherenceStatus",
									"value": "Active",
									"disabled": true
								},
								{
									"key": "adherenceStartdate",
									"value": "",
									"disabled": true
								},
								{
									"key": "adherenceEnddate",
									"value": "",
									"disabled": true
								},
								{
									"key": "registarSatelliteID",
									"value": "EU.EORI.NLISFSATONE",
									"disabled": true
								},
								{
									"key": "webSiteUrl",
									"value": "www*",
									"disabled": true
								},
								{
									"key": "companyEmail",
									"value": "*@*",
									"disabled": true
								},
								{
									"key": "companyPhone",
									"value": "123456789",
									"disabled": true
								},
								{
									"key": "publiclyPublishable",
									"value": "false",
									"disabled": true
								},
								{
									"key": "tags",
									"value": "*maritime",
									"disabled": true
								},
								{
									"key": "framework",
									"value": "iSHARE",
									"disabled": true
								},
								{
									"key": "subjectName",
									"value": "",
									"disabled": true
								},
								{
									"key": "role",
									"value": "isharesatellite",
									"disabled": true
								},
								{
									"key": "loA",
									"value": "High",
									"disabled": true
								},
								{
									"key": "compliancyVerified",
									"value": "yes",
									"disabled": true
								},
								{
									"key": "legalAdherence",
									"value": "yes",
									"disabled": true
								},
								{
									"key": "authorizationRegistryID",
									"value": "EU.EORI.NL000000004",
									"disabled": true
								},
								{
									"key": "authorizationRegistryName",
									"value": "iSHARE Test Authorization Registry",
									"disabled": true
								},
								{
									"key": "dataSpaceID",
									"value": "DSP.EU.NL.LOGISTICS",
									"disabled": true
								},
								{
									"key": "dataSpaceTitle",
									"value": "Logistics NL",
									"disabled": true
								},
								{
									"key": "countriesOfOperation",
									"value": "India",
									"disabled": true
								},
								{
									"key": "sectorIndustry",
									"value": "Energy",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "certificate_subject_name",
									"value": "CN=PyrolysisPlant,serialNumber=EU.EORI.DE1623002,O=Pyrolysis Plant,C=DE",
									"disabled": true
								},
								{
									"key": "certificate_subject_name",
									"value": "C=DE,CN=PyrolysisPlant,SERIALNUMBER=EU.EORI.DE1623002,O=Pyrolysis Plant",
									"disabled": true
								},
								{
									"key": "name",
									"value": "ABC Tr*",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All parties data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//to decode the response (output in console) when received as JWT. ",
									"//If the response is not JWT this results in error, which can be ignored)",
									"",
									"",
									"function jwt_decode(a) {",
									"    var parts = a.split('.'); // header, payload, signature",
									"    return JSON.parse(atob(parts[1]));",
									"}",
									"//Get the token",
									"var a = responseBody;",
									"",
									"//call your function to decode it",
									"let decodedData = jwt_decode(a);",
									"",
									"//print the decodedData to console to see the structure",
									"console.log(decodedData);",
									"",
									"responseBody = decodedData;",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{so.accesstoken.testcollection}}"
							},
							{
								"key": "Do-Not-Sign",
								"name": "Content-Type",
								"type": "text",
								"value": "true"
							},
							{
								"key": "Content-Type",
								"value": "true"
							}
						],
						"url": {
							"raw": "{{sat.baseurl}}/parties",
							"host": [
								"{{sat.baseurl}}"
							],
							"path": [
								"parties"
							],
							"query": [
								{
									"key": "eori",
									"value": "EU.EORI.NL000000003",
									"description": "EORI of the party whose status we want to check (in this case dummy-AR)",
									"disabled": true
								},
								{
									"key": "active_only",
									"value": "true",
									"disabled": true
								},
								{
									"key": "certified_only",
									"value": "true",
									"disabled": true
								},
								{
									"key": "certificate_subject_name",
									"value": "C=NL, SERIALNUMBER=NL000000004, CN=iSHARE Test Authorization Registry",
									"disabled": true
								},
								{
									"key": "subjectName",
									"value": "SERIALNUMBER=EU.EORI.BUDR0000002,CN=Driver 2",
									"disabled": true
								},
								{
									"key": "eori",
									"value": "",
									"disabled": true
								},
								{
									"key": "certified_only",
									"value": "",
									"disabled": true
								},
								{
									"key": "active_only",
									"value": "",
									"disabled": true
								},
								{
									"key": "date_time",
									"value": "2022-02-04",
									"disabled": true
								},
								{
									"key": "adherenceStatus",
									"value": "Active",
									"disabled": true
								},
								{
									"key": "adherenceStartdate",
									"value": "",
									"disabled": true
								},
								{
									"key": "adherenceEnddate",
									"value": "",
									"disabled": true
								},
								{
									"key": "registarSatelliteID",
									"value": "EU.EORI.NLISFSATONE",
									"disabled": true
								},
								{
									"key": "webSiteUrl",
									"value": "www*",
									"disabled": true
								},
								{
									"key": "companyEmail",
									"value": "*@*",
									"disabled": true
								},
								{
									"key": "companyPhone",
									"value": "123456789",
									"disabled": true
								},
								{
									"key": "publiclyPublishable",
									"value": "false",
									"disabled": true
								},
								{
									"key": "tags",
									"value": "*maritime",
									"disabled": true
								},
								{
									"key": "framework",
									"value": "iSHARE",
									"disabled": true
								},
								{
									"key": "subjectName",
									"value": "",
									"disabled": true
								},
								{
									"key": "role",
									"value": "isharesatellite",
									"disabled": true
								},
								{
									"key": "loA",
									"value": "High",
									"disabled": true
								},
								{
									"key": "compliancyVerified",
									"value": "yes",
									"disabled": true
								},
								{
									"key": "legalAdherence",
									"value": "yes",
									"disabled": true
								},
								{
									"key": "authorizationRegistryID",
									"value": "EU.EORI.NL000000004",
									"disabled": true
								},
								{
									"key": "authorizationRegistryName",
									"value": "iSHARE Test Authorization Registry",
									"disabled": true
								},
								{
									"key": "dataSpaceID",
									"value": "DSP.EU.NL.LOGISTICS",
									"disabled": true
								},
								{
									"key": "dataSpaceTitle",
									"value": "Logistics NL",
									"disabled": true
								},
								{
									"key": "countriesOfOperation",
									"value": "India",
									"disabled": true
								},
								{
									"key": "sectorIndustry",
									"value": "Energy",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "certificate_subject_name",
									"value": "CN=PyrolysisPlant,serialNumber=EU.EORI.DE1623002,O=Pyrolysis Plant,C=DE",
									"disabled": true
								},
								{
									"key": "certificate_subject_name",
									"value": "C=DE,CN=PyrolysisPlant,SERIALNUMBER=EU.EORI.DE1623002,O=Pyrolysis Plant",
									"disabled": true
								},
								{
									"key": "name",
									"value": "ABC Tr*",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Request dataspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//to decode the response (output in console) when received as JWT. ",
									"//If the response is not JWT this results in error, which can be ignored)",
									"",
									"",
									"function jwt_decode(a) {",
									"    var parts = a.split('.'); // header, payload, signature",
									"    return JSON.parse(atob(parts[1]));",
									"}",
									"//Get the token",
									"var a=responseBody;",
									"",
									"//call your function to decode it",
									"let decodedData=jwt_decode(a);",
									"",
									"//print the decodedData to console to see the structure",
									"console.log(decodedData);",
									"    ",
									" responseBody = decodedData;",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{so.accesstoken.testcollection}}"
							},
							{
								"key": "Do-Not-Sign",
								"name": "Content-Type",
								"type": "text",
								"value": "true"
							},
							{
								"key": "Content-Type",
								"value": "true"
							}
						],
						"url": {
							"raw": "{{sat.baseurl}}/dataspaces",
							"host": [
								"{{sat.baseurl}}"
							],
							"path": [
								"dataspaces"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"gl = { ",
					"    arrayBufferToString: function (buffer){",
					"        var arr = new Uint8Array(buffer);",
					"        var str = String.fromCharCode.apply(String, arr);",
					"        if(/[\\u0080-\\uffff]/.test(str)){",
					"            throw new Error('this string seems to contain (still encoded) multibytes');",
					"        }",
					"        return str;",
					"    },",
					"    ",
					"    createGenerateJwsRequest: function(iss, aud, x5c, privateKey) {",
					"          console.log('Generate assertion for ' + JSON.stringify({",
					"              iss: iss,",
					"              aud: aud,",
					"              x5c: x5c,",
					"              privateKey: privateKey",
					"          }));",
					"          ",
					"          var request =  {",
					"                      url: pm.variables.get('so') + '/testing/generate-jws',",
					"                      method: 'POST',",
					"                      header: {",
					"                          'alg': \"RS256\",",
					"                          'typ': \"JWT\",",
					"                          'iss': pm.variables.get(iss),",
					"                          'aud': pm.variables.get(aud),",
					"                          'x5c': pm.variables.get(x5c)",
					"                      },",
					"                      body: {",
					"                        mode: 'raw',",
					"                        raw: pm.variables.get(privateKey)",
					"                      }",
					"                };",
					"         console.log('Request ' + JSON.stringify(request));",
					"         return request;",
					"    },",
					"    ",
					"    createConnectTokenRequest: function(base, clientId, clientAssertion) {",
					"          console.log('Create token request ' + JSON.stringify({",
					"              base: base, ",
					"              clientId: clientId, ",
					"              clientAssertion: clientAssertion",
					"          }));",
					"                return {",
					"                      url: pm.variables.get(base) + '/connect/token',",
					"                      method: 'POST',",
					"\t\t\t\t\t  header: {",
					"\t\t\t\t\t\t'Accept': 'application/json',",
					"\t\t\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded'",
					"\t\t\t\t\t  },",
					"                      body: {",
					"                       mode: 'urlencoded',",
					"\t\t\t\t\t   urlencoded: [",
					"\t\t\t\t\t\t{key: 'grant_type', value: 'client_credentials'},",
					"\t\t\t\t\t\t{key: 'scope', value: 'iSHARE'},\t",
					"\t\t\t\t\t\t{key: 'client_assertion_type', value: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'},\t\t\t\t\t\t\t",
					"\t\t\t\t\t\t{key: 'client_assertion', value: clientAssertion },",
					"\t\t\t\t\t\t{key: 'client_id', value: pm.variables.get(clientId) },",
					"\t\t\t\t\t   ]",
					"                      }",
					"                }",
					"    },",
					"    ",
					"    createConnectTokenRequestSpa: function(base, scope, user, password) {",
					"          console.log('Create token request ' + JSON.stringify({",
					"              base: base, ",
					"              user: user,",
					"              scope: scope",
					"          }));",
					"                return {",
					"                      url: pm.variables.get(base) + '/connect/token',",
					"                      method: 'POST',",
					"\t\t\t\t\t  header: {",
					"\t\t\t\t\t\t'Accept': 'application/json',",
					"\t\t\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded'",
					"\t\t\t\t\t  },",
					"                      body: {",
					"                       mode: 'urlencoded',",
					"\t\t\t\t\t   urlencoded: [",
					"\t\t\t\t\t\t{key: 'grant_type', value: 'password'},",
					"\t\t\t\t\t\t{key: 'scope', value: scope},\t",
					"\t\t\t\t\t\t{key: 'client_secret', value: 'secret'},\t",
					"\t\t\t\t\t\t{key: 'client_id', value: 'spa' },",
					"\t\t\t\t\t\t{key: 'username', value: pm.variables.get(user) },",
					"\t\t\t\t\t\t{key: 'password', value: pm.variables.get(password) }",
					"\t\t\t\t\t   ]",
					"                      }",
					"                }",
					"    }",
					"}",
					"",
					"postman.setGlobalVariable(\"getAccessToken\", (iss, aud, x5c, privateKey, url, handler) => { ",
					"\t\t  ",
					"           console.log('getAccessToken ' + JSON.stringify({",
					"              iss: iss,",
					"              aud: aud,",
					"              privateKey: privateKey,",
					"              x5c: x5c,",
					"              url: url,",
					"              handler: handler !== 'undefined' ? 'handler is provided' : 'handler is not provided'",
					"          }));",
					"          ",
					"          ",
					"\t      pm.sendRequest(gl.createGenerateJwsRequest(iss, aud, x5c, privateKey), function (err, response) {",
					"\t            ",
					"\t\t\t\tif (err === null && response != null && response.code == 200) {",
					"    \t\t\t\tconst clientAssertion = gl.arrayBufferToString(response.stream);",
					"    \t\t\t   ",
					"    \t\t\t\tpm.sendRequest(gl.createConnectTokenRequest(url, iss, clientAssertion), function (err, response) {",
					"    \t\t\t\t        if (err === null && response != null && response.code == 200) {",
					"    \t\t\t\t            const accessToken = response.json().access_token;",
					"    \t\t\t\t            handler(err, accessToken);",
					"    \t\t\t\t        }",
					"        \t\t\t\t\telse {",
					"        \t\t\t\t\t    console.log('ERR!!! Access Token could not be retrieved. Error: ' + err);",
					"        \t\t\t\t\t    handler(err, null);",
					"        \t\t\t\t\t}",
					"    \t\t\t\t});",
					"\t\t\t\t} else {",
					"\t\t\t\t    console.log('ERR!!! client_assertion could not be retrieved. Error: ' + err);",
					"\t\t\t\t    handler(err, null);",
					"\t\t\t\t}",
					"\t\t\t});",
					"",
					"});",
					"",
					"postman.setGlobalVariable(\"getAccessTokenSpa\", (url, scope, user, password, handler) => { ",
					"\t\t  ",
					"           console.log('getAccessTokenSpa ' + JSON.stringify({",
					"              url: url,",
					"              user: user,",
					"              handler: handler !== 'undefined' ? 'handler is provided' : 'handler is not provided'",
					"          }));",
					"          ",
					"          ",
					"\t     \tpm.sendRequest(gl.createConnectTokenRequestSpa(url, scope, user, password), function (err, response) {",
					"    \t\t\t\t        if (err === null && response != null && response.code == 200) {",
					"    \t\t\t\t            const accessToken = response.json().access_token;",
					"    \t\t\t\t            handler(err, accessToken);",
					"    \t\t\t\t        }",
					"        \t\t\t\t\telse {",
					"        \t\t\t\t\t    console.log('ERR!!! Access Token could not be retrieved for spa client. Error: ' + err);",
					"        \t\t\t\t\t    handler(err, null);",
					"        \t\t\t\t\t}",
					"    \t\t\t\t});",
					"",
					"});",
					"",
					"postman.setGlobalVariable(\"getDelegationEvidence\", (delegationMask, iss, aud, x5c, privateKey, handler) => { ",
					"\t\t  ",
					"           console.log('getDelegationEvidence ' + JSON.stringify({",
					"              delegationMask: JSON.stringify(delegationMask), ",
					"              iss: iss,",
					"              aud: aud,",
					"              privateKey: privateKey,",
					"              x5c: x5c,",
					"              handler: handler !== 'undefined' ? 'handler is provided' : 'handler is not provided'",
					"          }));",
					"          ",
					"          // get an access token from ar",
					"          eval(globals.getAccessToken)(iss, aud, x5c, privateKey, 'ar', function(err, accessToken){",
					"              if (err === null) {",
					"                    const delegationRequest = {",
					"                      url: pm.variables.get('ar') + '/delegation',",
					"                      method: 'POST',",
					"\t\t\t\t\t  header: {",
					"\t\t\t\t\t\t'Authorization': 'Bearer ' + accessToken,",
					"\t\t\t\t\t    'Content-Type': 'application/json'",
					"\t\t\t\t\t  },",
					"                      body: {",
					"                       mode: 'raw',",
					"\t\t\t\t\t   raw: JSON.stringify(delegationMask)",
					"                      }",
					"                    };",
					"    \t\t\t\tpm.sendRequest(delegationRequest, function(err, response) {",
					"    \t\t\t\t    if (err === null && response != null && response.code == 200) {",
					"    \t\t\t\t        const delegationToken = response.json().delegation_token;",
					"    \t\t\t\t        handler(err, delegationToken);",
					"    \t\t\t\t    } else {",
					"    \t\t\t\t        console.log('ERR!!! delegation_evidence could not be retrieved. Error: ' + err);",
					"    \t\t\t\t        handler(err, null);",
					"    \t\t\t\t    }",
					"    \t\t\t\t});",
					"              }",
					"          });",
					"});",
					"",
					"postman.setGlobalVariable('authorizeContainers', (delegationMask, iss, aud, x5c, privateKey, url) => {",
					"    eval(globals.getAccessToken)(iss, aud, x5c, privateKey, url, function(err, accessToken){",
					"        ",
					"        if (accessToken != null)",
					"        {",
					"            pm.variables.set('access_token', accessToken); ",
					"            ",
					"            eval(globals.getDelegationEvidence)(delegationMask, iss, 'ar.client_id', x5c, privateKey, function(err, response){",
					"                    ",
					"                    var delegationEvidence = response || \"no valid delegation evidence\";",
					"                    ",
					"                    pm.variables.set('delegation_evidence', delegationEvidence);",
					"                }",
					"            );",
					"        }",
					"    }",
					"  );",
					"});",
					"",
					"postman.setGlobalVariable('authorize', (iss, aud, x5c, privateKey, url) => {",
					"    eval(globals.getAccessToken)(iss, aud, x5c, privateKey, url, function(err, accessToken){",
					"        ",
					"        if (accessToken != null)",
					"        {",
					"            pm.variables.set('access_token', accessToken); ",
					"        }",
					"    }",
					"  );",
					"});",
					"",
					"postman.setGlobalVariable('authorizeSpa', (url, scope, user, password) => {",
					"    eval(globals.getAccessTokenSpa)(url, scope, user, password, function(err, accessToken){",
					"        ",
					"        if (accessToken != null)",
					"        {",
					"            pm.variables.set('access_token', accessToken); ",
					"        }",
					"    }",
					"  );",
					"});",
					"",
					"postman.setGlobalVariable('generateJwsToken', (iss, aud, x5c, privateKey) => {",
					"    pm.sendRequest(gl.createGenerateJwsRequest(iss, aud, x5c, privateKey), function (err, response) {",
					"\t\t\t\tif (err === null && response != null && response.code == 200) {",
					"    \t\t\t\tconst clientAssertion = gl.arrayBufferToString(response.stream);",
					"    \t\t\t   ",
					"    \t\t\t\tpm.variables.set('client_assertion', clientAssertion);",
					"\t\t\t\t} else {",
					"\t\t\t\t    console.log('ERR!!! client_assertion could not be retrieved. Error: ' + err);",
					"\t\t\t\t    handler(err, null);",
					"\t\t\t\t}",
					"\t\t\t});",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}